<resources>
    <string name="app_name">FlowView</string>

    <string name="test">Matrix 是一款微信研发并日常使用的应用性能接入框架，支持iOS, macOS和Android。 Matrix 通过接入各种性能监控方案，对性能监控项的异常数据进行采集和分析，输出相应的问题分析、定位与优化建议，从而帮助开发者开发出更高质量的应用。

Matrix for iOS/macOS
当前工具监控范围包括：崩溃、卡顿和爆内存，包含以下两款插件：

WCCrashBlockMonitorPlugin： 基于 KSCrash 框架开发，具有业界领先的卡顿堆栈捕获能力，同时兼备崩溃捕获能力。

WCMemoryStatPlugin： 一款性能优化到极致的爆内存监控工具，能够全面捕获应用爆内存时的内存分配以及调用堆栈情况。

特性
WCCrashBlockMonitorPlugin
接入简单，代码无侵入
通过检查 Runloop 运行状态判断应用是否卡顿，同时支持 iOS/macOS 平台
增加耗时堆栈提取，卡顿线程快照日志中附加最近时间最耗时的主线程堆栈
WCMemoryStatPlugin
在应用运行期间获取对象存活以及相应的堆栈信息，在检测到应用爆内存时进行上报
使用平衡二叉树存储存活对象，使用 Hash Table 存储堆栈，将性能优化到极致
使用方法
安装
通过 Cocoapods 安装

先安装 CocoaPods；
通过 pod repo update 更新 matrix 的 Cocoapods 版本；
在 Podfile 对应的 target 中，添加 pod 并执行 pod install；
在项目中使用 Cocoapods 生成的 .xcworkspace运行工程；

通过静态库安装

获取 Matrix 源码；
打开命令行，在 matrix/matrix-iOS 代码目录下执行 make 进行编译生成静态库；编译完成后，iOS 平台的库在 matrix/matrix-iOS/build_ios 目录下，macOS 平台的库在 matrix/matrix-iOS/build_macos 目录下；
工程引入静态库：
iOS 平台：使用 matrix/matrix-iOS/build_ios 路径下的 Matrix.framework，将 Matrix.framework 以静态库的方式引入工程；
macOS 平台：使用 matrix/matrix-iOS/build_macos 路径下的 Matrix.framework，将 Matrix.framework 以静态库的方式引入工程。
启动监控
在以下地方：

程序 main 函数入口；
AppDelegate 中的 application:didFinishLaunchingWithOptions:；
或者其他应用启动比较早的时间点。
添加类似如下代码，启动插件：特性
与常规的 APM 工具相比，Matrix 拥有以下特点：

APK Checker
具有更好的可用性：JAR 包方式提供，更方便应用到持续集成系统中，从而追踪和对比每个 APK 版本之间的变化
更多的检查分析功能：除具备 APKAnalyzer 的功能外，还支持统计 APK 中包含的 R 类、检查是否有多个动态库静态链接了 STL 、搜索 APK 中包含的无用资源，以及支持自定义检查规则等
输出的检查结果更加详实：支持可视化的 HTML 格式，便于分析处理的 JSON ，自定义输出等等
Resource Canary
分离了检测和分析部分，便于在不打断自动化测试的前提下持续输出分析后的检测结果
对检测部分生成的 Hprof 文件进行了裁剪，移除了大部分无用数据，降低了传输 Hprof 文件的开销
增加了重复 Bitmap 对象检测，方便通过减少冗余 Bitmap 数量，降低内存消耗
Trace Canary
编译期动态修改字节码, 高性能记录执行耗时与调用堆栈
准确的定位到发生卡顿的函数，提供执行堆栈、执行耗时、执行次数等信息，帮助快速解决卡顿问题
自动涵盖卡顿、启动耗时、页面切换、慢函数检测等多个流畅性指标
准确监控ANR，并且能够高兼容性和稳定性地保存系统产生的ANR Trace文件
SQLite Lint
接入简单，代码无侵入
数据量无关，开发、测试阶段即可发现SQLite性能隐患
检测算法基于最佳实践，高标准把控SQLite质量*
底层是 C++ 实现，支持多平台扩展
IO Canary
接入简单，代码无侵入
性能、泄漏全面监控，对 IO 质量心中有数
兼容到 Android P
Battery Canary
接入简单，开箱即用
预留 Base 类和 Utility 工具以便扩展监控特性
Memory Hook
一个检测 Android native 内存泄漏的工具
无侵入，基于 PLT-hook(iqiyi/xHook)，无需重编 native 库
高性能，基于 Wechat-Backtrace 进行快速 unwind 堆栈，支持 aarch64 和 armeabi-v7a 架构
Pthread Hook
一个检测 Android Java 和 native 线程泄漏及缩减 native 线程栈空间的工具
无侵入，基于 PLT-hook(iqiyi/xHook)，无需重编 native 库
通过对 native 线程的默认栈大小进行减半降低线程带来的虚拟内存开销，在 32 位环境下可缓解虚拟内存不足导致的崩溃问题
WVPreAllocHook
一个用于安全释放 WebView 预分配内存以在不加载 WebView 时节省虚拟内存的工具，在 32 位环境下可缓解虚拟内存不足导致的崩溃问题
无侵入，基于 PLT-hook(iqiyi/xHook)，无需重编 native 库
使用该工具后 WebView 仍可正常工作
MemGuard
一个基于 GWP-Asan 修改的堆内存问题检测工具
无侵入，基于 PLT-hook(iqiyi/xHook)，无需重编 native 库
可根据正则表达式指定被检测的目标库
可检测堆内存访问越界、使用释放后的内存和双重释放等问题
Backtrace Component
基于 DWARF 以及 ARM 异常处理数据进行简化并生成全新的 quicken unwind tables 数据，用于实现可快速回溯 native 调用栈的 backtrace 组件。回溯速度约是 libunwindstack 的 15x ~ 30x 左右。
使用方法
由于 JCenter 服务将于 2022 年 2 月 1 日下线，我们已将 Matrix 新版本（>= 0.8.0) maven repo 发布至 MavenCentral。

在你项目根目录下的 gradle.properties 中配置要依赖的 Matrix 版本号，如：</string>

</resources>